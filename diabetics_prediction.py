# -*- coding: utf-8 -*-
"""Diabetics Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10l-LN4yliJ4eVQa5HszJRvm8R7Sajnss

Importing libraries
"""

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm

"""Data Collection and Pre-processing"""

diab_dataset = pd.read_csv('/content/Diabetes_PIMA.csv')

diab_dataset.head()

"""1 = Diabetic
0 = Non-Diabetic
"""

diab_dataset.shape

diab_dataset.describe()

diab_dataset['Outcome'].value_counts()

diab_dataset.groupby('Outcome').mean()

#separate data and label
X = diab_dataset.drop(columns='Outcome',axis=1)
Y = diab_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data

"""Train Test Split"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,random_state=2,test_size=0.2,stratify=Y)

print(X.shape,X_train.shape,X_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy score on train data
X_train_pred = classifier.predict(X_train)
train_data_acc = accuracy_score(X_train_pred,Y_train)
print("Accuracy Score for training data : ",train_data_acc)

#accuracy score on test data
X_test_pred = classifier.predict(X_test)
test_data_acc = accuracy_score(X_test_pred,Y_test)
print("Accuracy Score for training data : ",test_data_acc)

"""Making Predictive System"""

#input data
input_data = (0,73,0,0,0,21.1,0.342,25)#0

#12,121,78,17,0,26.5,0.259,62,0
#8,100,76,0,0,38.7,0.19,42,0
#8,124,76,24,600,28.7,0.687,52,1
#1,93,56,11,0,22.5,0.417,22,0
#8,143,66,0,0,34.9,0.129,41,1
#6,103,66,0,0,24.3,0.249,29,0
#3,176,86,27,156,33.3,1.154,52,1
#0,73,0,0,0,21.1,0.342,25,0
#11,111,84,40,0,46.8,0.925,45,1


#array to np array
input_np = np.asarray(input_data)

#reshape
input_reshape = input_np.reshape(1,-1)

#Data Standardization
input_std = scaler.transform(input_reshape)

#prediction
prediction = classifier.predict(input_std)
if(prediction[0] == 0):
  print("Diabetic Patient")
else:
  print("Normal Patient")

